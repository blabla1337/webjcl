
var fs = require('fs');



function build_require_list(require_list, param_list, folder)
{
	
	var processors = fs.readdirSync(folder);
	
	for (f in processors)
	{
		// Obtain the filename without extension.
		var file = processors[f].split('.')[0];
		
		param_list.push(file);
		
		require_list.push('JobProcessing/preprocessors/' + file);

	}
	
}


var postp_require_list = [];
var postp_param_list = [];

var prep_require_list = [];
var prep_param_list = [];


build_require_list(postp_require_list, postp_param_list, './postprocessors');
build_require_list(prep_require_list, prep_param_list, './preprocessors');




// Copy and contatenate both post and pre require_lists.
var global_require_list = postp_require_list.concat(prep_require_list);

// Copy and concatenate both post and pre param_lists
var global_param_list = postp_param_list.concat(prep_param_list);





// Add in the AceProcessingChain require.
global_param_list.push("AceProcessingChain");
global_require_list.push("JobProcessing/AceProcessingChain");

// Obtain a string of function parameters
var csv_param = global_param_list.join(", ");

// Read the skeleton file
var skel_file = fs.readFileSync('./load.js.skel', 'UTF8');

// Begin replacing skeleton parameters.
skel_file = skel_file.replace('%module_requirement_array%', JSON.stringify(global_require_list));
skel_file = skel_file.replace('%func_params%', csv_param);
skel_file = skel_file.replace('%param_list%', JSON.stringify(global_param_list));

skel_file = skel_file.replace('%preprocessors%', JSON.stringify(prep_param_list));
skel_file = skel_file.replace('%postprocessors%', JSON.stringify(postp_param_list));

// Prepend the generation warning.
skel_file = " // WARNING WARNING WARNING! DO NOT EDIT THIS FILE! \n" +
			" // This is automatically generated on the server via build.load.js.\n" +
			" // If you wish to make changes, edit the load.js.skel file.\n\n" + 
			skel_file;

// Write file
var load_js = fs.openSync('load.js', 'w');

fs.writeSync(load_js, skel_file);

fs.closeSync(load_js);
